const ethers = require("ethers");
const axios = require("axios");
const fs = require("fs");
const express = require("express");

const app = express();
app.use(express.json());

const selfMonitor = {
  address: "0x2a4cE5BaCcB98E5F95D37F8B3D1065754E0389CD",
  lastStatus: "safe"
};

// === üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const RPC_URL = process.env.RPC_URL;
const STATIC_CHAT_ID = process.env.STATIC_CHAT_ID?.trim();
const THRESHOLD_USD = parseFloat(process.env.THRESHOLD_USD || "1000");
const CHECK_INTERVAL_MS = parseInt(process.env.CHECK_INTERVAL_MS || "60000");

if (!BOT_TOKEN || !RPC_URL) {
  console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç BOT_TOKEN –∏–ª–∏ RPC_URL –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.");
  process.exit(1);
}

const provider = new ethers.providers.JsonRpcProvider(RPC_URL);
let ACTIVE_CHAT_ID = STATIC_CHAT_ID || null;

if (ACTIVE_CHAT_ID) {
  console.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω chat_id –∏–∑ STATIC_CHAT_ID:", ACTIVE_CHAT_ID);
} else {
  console.log("‚ö†Ô∏è chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–æ—Ç –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ—Ç, –∫–æ–º—É —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
}

const ironBankPools = [
  { name: "USDT", address: "0x48759F220ED983dB51fA7A8C0D2AAb8f3ce4166a", decimals: 6 },
  { name: "USDC", address: "0x76Eb2FE28b36B3ee97F3Adae0C69606eeDB2A37c", decimals: 6 },
  { name: "DAI",  address: "0x8e595470Ed749b85C6F7669de83EAe304C2ec68F", decimals: 18 },
  { name: "ETH",  address: "0x41c84c0e2EE0b740Cf0d31F63f3B6F627DC6b393", decimals: 18 }
];

// –ü—Ä–∏–º–µ—Ä –¥–ª—è Compound (–∑–∞–º–µ–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–π —Å–µ—Ç–∏)
const compoundPools = [
  { name: "USDT",   address: "0xf650c3d88d12db855b8bf7d11be6c55a4e07dcc9", decimals: 8, underlyingDecimals: 6 }, // cUSDT
  { name: "ETH",    address: "0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5", decimals: 8, underlyingDecimals: 18 }, // cETH (WETH market)
  { name: "wstETH", address: "0x041171993284df560249B57358F931D9eB7b925D", decimals: 8, underlyingDecimals: 18 }, // cWSTETH
  { name: "WBTC",   address: "0xccF4429DB6322D5C611ee964527D42E5d685DD6a", decimals: 8, underlyingDecimals: 8 }   // cWBTC
];

const aavePools = [
  {
    name: "USDT",
    aToken: "0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811",
    variableDebtToken: "0x619beb58998eD2278e08620f97007e1116D5D25b",
    decimals: 6
  },
  {
    name: "ETH",
    aToken: "0x3a3A65aAb0dd2A17E3F1947bA16138cd37d08c04",
    variableDebtToken: "0xF63B34710400CAd3e044cFfDcAb00a0f32E33eCf", // –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ getReserveTokensAddresses
    decimals: 18
  }
];

const lastCashValues = {};

async function getCash(pool) {
  const cToken = new ethers.Contract(pool.address, ["function getCash() view returns (uint256)"], provider);
  const rawCash = await cToken.getCash();
  return parseFloat(ethers.utils.formatUnits(rawCash, pool.decimals));
}

async function sendTelegramMessage(text, chatId = ACTIVE_CHAT_ID) {
  if (!chatId) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç chat_id, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏:", text);
    return;
  }

  console.log("üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ‚Üí", chatId, "|", text);
  try {
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: chatId,
      text,
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err.response?.data || err.message);
  }
}

async function checkLiquidity() {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏...");

  for (const pool of ironBankPools) {
    try {
      const currentCash = await getCash(pool);
      const prev = lastCashValues[pool.name];

      if (prev !== undefined) {
        const diff = currentCash - prev;
        if (Math.abs(diff) >= THRESHOLD_USD) {
          const direction = diff > 0 ? "–¥–æ–±–∞–≤–ª–µ–Ω–∞" : "–∏–∑—ä—è—Ç–∞";
          const message = `üíß –í –ø—É–ª–µ ${pool.name} ${direction} –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${diff.toFixed(2)} USD`;
          console.log(message);
          await sendTelegramMessage(message);
        }
      }

      lastCashValues[pool.name] = currentCash;
    } catch (err) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–ª–∞ ${pool.name}:`, err.message);
    }
  }
}

app.post("/webhook", async (req, res) => {
  const update = req.body;
  const message = update.message?.text?.trim();
  const userId = update.message?.chat?.id;

  if (!message || !userId) return res.sendStatus(200);

  if (!ACTIVE_CHAT_ID) {
    ACTIVE_CHAT_ID = userId.toString();
    console.log("üíæ chat_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", ACTIVE_CHAT_ID);
  }

  if (message === "/status") {
    let text = "üìä –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–æ –ø—É–ª–∞–º:\n";
    for (const pool of ironBankPools) {
      try {
        const cash = await getCash(pool);
        text += `${pool.name}: ${cash.toLocaleString(undefined, { maximumFractionDigits: 2 })} USD\n`;
      } catch {
        text += `${pool.name}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n`;
      }
    }
    await sendTelegramMessage(text, userId);
  } else if (message === "/start") {
    await sendTelegramMessage("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", userId);
  } else if (message === "/hf") {
    try {
      const results = await calculateAllHealthFactors();
      let text = "";
      for (const res of results) {
        text += `\n=== ${res.protocol} ===\n`;
        text += `üìâ Health Factor: ${res.hf}\nüíº –ó–∞–ª–æ–≥: $${res.collateral.toFixed(2)}\nüí£ –î–æ–ª–≥: $${res.borrow.toFixed(2)}\nüí∞ –ü–æ—Ä—Ç—Ñ–µ–ª—å: $${res.portfolio.toFixed(2)}\n`;
        for (const line of res.breakdown) {
          text += `‚Ä¢ ${line}\n`;
        }
        if (res.liquidationEthPrice) {
          text += `‚ö†Ô∏è –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è –ø—Ä–∏ —Ü–µ–Ω–µ ETH ‚âà $${res.liquidationEthPrice.toFixed(2)}\n`;
        }
      }
      await sendTelegramMessage(text, userId);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ calculateHealthFactor:", err);
      await sendTelegramMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ Health Factor. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.", userId);
    }
  }

  res.sendStatus(200);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log("Express server started on port", PORT);
});

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏
(async () => {
  try {
    const block = await provider.getBlockNumber();
    console.log("‚úÖ –°–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫:", block);
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏:", e.message);
  }
})();

// –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤
setInterval(checkLiquidity, CHECK_INTERVAL_MS);
setInterval(checkSelfHealth, CHECK_INTERVAL_MS);

checkLiquidity();
function checkSelfHealth() {
  // –ü–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏
}

const cTokenAbi = [
  "function balanceOf(address) view returns (uint256)",
  "function borrowBalanceStored(address) view returns (uint256)",
  "function exchangeRateStored() view returns (uint256)",
  "function decimals() view returns (uint8)"
];
const userAddress = selfMonitor.address;

// –ö—ç—à –¥–ª—è —Ü–µ–Ω—ã ETH
let cachedEthPrice = null;
let lastEthPriceUpdate = 0;
const ETH_PRICE_CACHE_MS = 60_000; // 1 –º–∏–Ω—É—Ç–∞

async function getEthPrice() {
  const now = Date.now();
  if (cachedEthPrice && now - lastEthPriceUpdate < ETH_PRICE_CACHE_MS) {
    return cachedEthPrice;
  }
  // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É ETH —á–µ—Ä–µ–∑ Binance API
  const { data } = await axios.get("https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT");
  cachedEthPrice = parseFloat(data.price);
  lastEthPriceUpdate = now;
  return cachedEthPrice;
}
async function getWstethPrice() {
  // –ß–µ—Ä–µ–∑ CoinGecko API
  const { data } = await axios.get("https://api.coingecko.com/api/v3/simple/price?ids=staked-ether&vs_currencies=usd");
  return data["staked-ether"].usd;
}
async function getWbtcPrice() {
  // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É WBTC —á–µ—Ä–µ–∑ Binance API
  const { data } = await axios.get("https://api.binance.com/api/v3/ticker/price?symbol=WBTCUSDT");
  return parseFloat(data.price);
}
const comptrollerAddress = "0xAB1c342C7bf5Ec5F02ADEA1c2270670bCa144CbB";
const comptrollerAbi = [
  "function markets(address cToken) view returns (bool isListed, uint256 collateralFactorMantissa, bool isComped)"
];
const comptroller = new ethers.Contract(comptrollerAddress, comptrollerAbi, provider);

async function getCollateralFactor(cTokenAddress) {
  const market = await comptroller.markets(cTokenAddress);
  // collateralFactorMantissa –æ–±—ã—á–Ω–æ —Å 18 –∑–Ω–∞–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 800000000000000000 = 0.8)
  return Number(ethers.utils.formatUnits(market.collateralFactorMantissa, 18));
}

const getCompoundCollateralFactor = getCollateralFactor;

async function calculateIronBank() {
  let totalCollateralUSD = 0;
  let totalBorrowUSD = 0;
  let totalSuppliedUSD = 0;
  let ethBorrow = 0;
  let ethPrice = await getEthPrice();
  let wbtcPrice = null;
  let wstethPrice = null;
  let breakdown = [];

  for (const pool of ironBankPools) {
    const cToken = new ethers.Contract(pool.address, cTokenAbi, provider);

    const [cBal, borrow, exchangeRate, collateralFactor] = await Promise.all([
      cToken.balanceOf(userAddress),
      cToken.borrowBalanceStored(userAddress),
      cToken.exchangeRateStored(),
      getCollateralFactor(pool.address)
    ]);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º scale –¥–ª—è exchangeRate (18 –∏–ª–∏ 8)
    let exchangeRateScale = 18;
    if (exchangeRate.lt(ethers.BigNumber.from("1000000000000"))) {
      exchangeRateScale = 8;
    }

    const suppliedUnderlying = cBal.mul(exchangeRate).div(ethers.BigNumber.from(10).pow(exchangeRateScale));
    const supplied = parseFloat(ethers.utils.formatUnits(suppliedUnderlying, pool.decimals));
    const borrowed = parseFloat(ethers.utils.formatUnits(borrow, pool.decimals));

    let suppliedUSD = supplied;
    let borrowedUSD = borrowed;

    if (pool.name === "ETH") {
      suppliedUSD = supplied * ethPrice;
      borrowedUSD = borrowed * ethPrice;
      ethBorrow = borrowed;
    }
    if (pool.name === "WBTC") {
      if (!wbtcPrice) wbtcPrice = await getWbtcPrice();
      suppliedUSD = supplied * wbtcPrice;
      borrowedUSD = borrowed * wbtcPrice;
    }
    if (pool.name === "wstETH") {
      if (!wstethPrice) wstethPrice = await getWstethPrice();
      suppliedUSD = supplied * wstethPrice;
      borrowedUSD = borrowed * wstethPrice;
    }

    if (suppliedUSD > 0) {
      totalSuppliedUSD += suppliedUSD;
      totalCollateralUSD += suppliedUSD * collateralFactor;
      breakdown.push(`${pool.name}: üü¢ $${suppliedUSD.toFixed(2)} (${supplied.toFixed(4)} ${pool.name}) √ó CF ${collateralFactor}`);
    }
    if (borrowedUSD > 0) {
      totalBorrowUSD += borrowedUSD;
      breakdown.push(`${pool.name}: üî¥ $${borrowedUSD.toFixed(2)} (${borrowed.toFixed(4)} ${pool.name})`);
    }
  }

  let hf = totalBorrowUSD > 0 ? totalCollateralUSD / totalBorrowUSD : 0;
  let liquidationEthPrice = ethBorrow > 0 ? totalCollateralUSD / ethBorrow : null;
  let portfolio = totalSuppliedUSD - totalBorrowUSD;

  return {
    hf: hf.toFixed(4),
    collateral: totalCollateralUSD,
    borrow: totalBorrowUSD,
    portfolio,
    breakdown,
    liquidationEthPrice,
    ethPrice
  };
}
// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è Compound:
const Web3 = require('web3');
const web3 = new Web3('https://eth-mainnet.g.alchemy.com/v2/7QH7n3H4DakNuBQsKL8IcLRHDTGzG_oJ');

// –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Compound v3 Comet –¥–ª—è USDT
const cometAddress = "0xc3d688B66703497DAA19211EEdff47f25384cdc3"; // –≠—Ç–æ –¥–ª—è USDT, –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤

// ABI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Compound v3
const cometAbi = [
    "function borrowBalanceOf(address) view returns (uint256)",
    "function collateralBalanceOf(address, address) view returns (uint256)",
    "function getAssetInfoByAddress(address) view returns (uint128 offset, uint96 scale, uint64 collateralFactor, ...)",
    "function getPrice(address) view returns (uint256)" // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞
];

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
const comet = new web3.eth.Contract(cometAbi, cometAddress);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è Health Factor
async function calculateCompoundV3(address) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–∞
        const borrowBalance = await comet.methods.borrowBalanceOf(address).call();
        const collateralBalance = await comet.methods.collateralBalanceOf(address, cometAddress).call();
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–µ
        const assetInfo = await comet.methods.getAssetInfoByAddress(address).call();

        // –ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ collateral factor (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å, —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤—ã)
        const collateralFactor = assetInfo[2]; // –í–µ—Ä–æ—è—Ç–Ω–æ, —ç—Ç–æ 3-–π –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç.–µ. collateralFactor

        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ETH –∏–ª–∏ wstETH)
        const assetPrice = await comet.methods.getPrice(address).call();

        // –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ HF
        const healthFactor = (collateralBalance * collateralFactor) / borrowBalance;

        console.log("Borrow Balance: ", borrowBalance);
        console.log("Collateral Balance: ", collateralBalance);
        console.log("Collateral Factor: ", collateralFactor);
        console.log("Asset Price: ", assetPrice);
        console.log("Health Factor: ", healthFactor);

        return healthFactor;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ Health Factor:", error);
    }
}
calculateCompoundV3(userAddress).then((healthFactor) => {
    console.log("Health Factor –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", healthFactor);
});


// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è Aave:
async function calculateAave() {
  let totalCollateralUSD = 0;
  let totalBorrowUSD = 0;
  let totalSuppliedUSD = 0;
  let ethPrice = await getEthPrice();
  let breakdown = [];

  for (const pool of aavePools) {
    const { supplied, borrowed } = await getAavePosition(pool);
    let suppliedUSD = supplied;
    let borrowedUSD = 0;

    if (pool.name === "ETH") {
      suppliedUSD = supplied * ethPrice;
    } else if (pool.name === "USDT") {
      borrowedUSD = borrowed;
    }

    if (suppliedUSD > 0) {
      totalSuppliedUSD += suppliedUSD;
      const collateralFactor = pool.name === "USDT" ? 0.8 : 0.8; // –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –∏–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
      totalCollateralUSD += suppliedUSD * collateralFactor;
      breakdown.push(`${pool.name}: üü¢ $${suppliedUSD.toFixed(2)} (${supplied.toFixed(4)} ${pool.name}) √ó CF ${collateralFactor}`);
    }
    if (borrowedUSD > 0) {
      totalBorrowUSD += borrowedUSD;
      breakdown.push(`${pool.name}: üî¥ $${borrowedUSD.toFixed(2)} (${borrowed.toFixed(4)} ${pool.name})`);
    }
  }

  let hf = totalBorrowUSD > 0 ? totalCollateralUSD / totalBorrowUSD : 0;
  let portfolio = totalSuppliedUSD - totalBorrowUSD;

  return {
    protocol: "Aave",
    hf: hf.toFixed(4),
    collateral: totalCollateralUSD,
    borrow: totalBorrowUSD,
    portfolio,
    breakdown
  };
}

// –ò—Ç–æ–≥–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function calculateAllHealthFactors() {
  const iron = await calculateIronBank();
  const compound = await calculateCompound();
  const aave = await calculateAave();
  return [iron, compound, aave];
}

// –î–ª—è Compound
async function getCompoundPosition(pool) {
  const cToken = new ethers.Contract(pool.address, cTokenAbi, provider);
  let supplied = 0, borrowed = 0;
  try {
    const [cBal, borrow, exchangeRate] = await Promise.all([
      cToken.balanceOf(userAddress),
      cToken.borrowBalanceStored(userAddress),
      cToken.exchangeRateStored()
    ]);
    const suppliedUnderlying = cBal.mul(exchangeRate).div(ethers.BigNumber.from(10).pow(18 + 8 - pool.underlyingDecimals));
    supplied = parseFloat(ethers.utils.formatUnits(suppliedUnderlying, pool.underlyingDecimals));
    borrowed = parseFloat(ethers.utils.formatUnits(borrow, pool.underlyingDecimals));
  } catch (e) {
    // –ï—Å–ª–∏ borrowBalanceStored revert ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º borrowed = 0
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å borrow –¥–ª—è ${pool.name}:`, e.message);
  }
  return { supplied, borrowed };
}

// –î–ª—è Aave
async function getAavePosition(pool) {
  const erc20Abi = [
    "function balanceOf(address) view returns (uint256)"
  ];
  const aToken = new ethers.Contract(pool.aToken, erc20Abi, provider);
  let supplied = 0, borrowed = 0;
  try {
    const suppliedRaw = await aToken.balanceOf(userAddress);
    supplied = parseFloat(ethers.utils.formatUnits(suppliedRaw, pool.decimals));
  } catch (e) {
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å supply –¥–ª—è ${pool.name}:`, e.message);
  }
  try {
    const debtToken = new ethers.Contract(pool.variableDebtToken, erc20Abi, provider);
    const borrowedRaw = await debtToken.balanceOf(userAddress);
    borrowed = parseFloat(ethers.utils.formatUnits(borrowedRaw, pool.decimals));
  } catch (e) {
    // –ï—Å–ª–∏ variableDebtToken –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º borrowed = 0
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å borrow –¥–ª—è ${pool.name}:`, e.message);
  }
  return { supplied, borrowed };
}