const ethers = require("ethers");
const axios = require("axios");
const fs = require("fs");
const express = require("express");

const app = express();
app.use(express.json());

const selfMonitor = {
  address: "0x2a4cE5BaCcB98E5F95D37F8B3D1065754E0389CD",
  lastStatus: "safe"
};

// === üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const RPC_URL = process.env.RPC_URL;
const STATIC_CHAT_ID = process.env.STATIC_CHAT_ID?.trim();
const THRESHOLD_USD = parseFloat(process.env.THRESHOLD_USD || "1000");
const CHECK_INTERVAL_MS = parseInt(process.env.CHECK_INTERVAL_MS || "60000");

if (!BOT_TOKEN || !RPC_URL) {
  console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç BOT_TOKEN –∏–ª–∏ RPC_URL –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.");
  process.exit(1);
}

const provider = new ethers.providers.JsonRpcProvider(RPC_URL);
let ACTIVE_CHAT_ID = STATIC_CHAT_ID || null;

if (ACTIVE_CHAT_ID) {
  console.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω chat_id –∏–∑ STATIC_CHAT_ID:", ACTIVE_CHAT_ID);
} else {
  console.log("‚ö†Ô∏è chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–æ—Ç –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ—Ç, –∫–æ–º—É —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
}

const ironBankPools = [
  { name: "USDT", address: "0x48759F220ED983dB51fA7A8C0D2AAb8f3ce4166a", decimals: 6 },
  { name: "USDC", address: "0x76Eb2FE28b36B3ee97F3Adae0C69606eeDB2A37c", decimals: 6 },
  { name: "DAI", address: "0x8e595470Ed749b85C6F7669de83EAe304C2ec68F", decimals: 18 },
  { name: "ETH", address: "0x41c84c0e2EE0b740Cf0d31F63f3B6F627DC6b393", decimals: 18 }
];

// –ü—Ä–∏–º–µ—Ä –¥–ª—è Compound (–∑–∞–º–µ–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–π —Å–µ—Ç–∏)
const compoundPools = [
  { name: "USDT", address: "0xf650C3d88Cc8617A7bD0D0d6fA41a6C7eCfC3bC1", decimals: 8, underlyingDecimals: 6 },
  { name: "USDC", address: "0x39AA39c021dfbaE8faC545936693aC917d5E7563", decimals: 8, underlyingDecimals: 6 },
  { name: "DAI", address: "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", decimals: 8, underlyingDecimals: 18 },
  { name: "ETH", address: "0x4Dd26482738bE6C06C31467a19dcdA9AD781e8C4", decimals: 8, underlyingDecimals: 18 },
  { name: "wstETH", address: "0x041171993284df560249B57358F931D9eB7b925D", decimals: 8, underlyingDecimals: 18 },
  { name: "WBTC", address: "0x2263B9A0fD6A2633A2F6a5cAaA0dA3aE3C5A6cA5", decimals: 8, underlyingDecimals: 8 }
];

// –ü—Ä–∏–º–µ—Ä –¥–ª—è Aave v2 (–∑–∞–º–µ–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ aToken –∏ debtToken)
const aavePools = [
  { name: "USDT", aToken: "0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811", variableDebtToken: "0x619beb58998eD2278e08620f97007e1116D5D25b", decimals: 6 },
  { name: "USDC", aToken: "0xBcca60bB61934080951369a648Fb03DF4F96263C", variableDebtToken: "0x619beb58998eD2278e08620f97007e1116D5D25b", decimals: 6 },
  { name: "DAI", aToken: "0x028171bCA77440897B824Ca71D1c56E803B653a9", variableDebtToken: "0x6C3e4cb2E96B01F4b866965A91ed4437839A121a", decimals: 18 },
  { name: "ETH", aToken: "0xd01607c3C5eCABa394D8be377a08590149325722", variableDebtToken: "0x77ca01483f379E58174739308945f044e1a764dc", decimals: 18 }
];

const lastCashValues = {};

async function getCash(pool) {
  const cToken = new ethers.Contract(pool.address, ["function getCash() view returns (uint256)"], provider);
  const rawCash = await cToken.getCash();
  return parseFloat(ethers.utils.formatUnits(rawCash, pool.decimals));
}

async function sendTelegramMessage(text, chatId = ACTIVE_CHAT_ID) {
  if (!chatId) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç chat_id, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏:", text);
    return;
  }

  console.log("üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ‚Üí", chatId, "|", text);
  try {
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: chatId,
      text,
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err.response?.data || err.message);
  }
}

async function checkLiquidity() {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏...");

  for (const pool of ironBankPools) {
    try {
      const currentCash = await getCash(pool);
      const prev = lastCashValues[pool.name];

      if (prev !== undefined) {
        const diff = currentCash - prev;
        if (Math.abs(diff) >= THRESHOLD_USD) {
          const direction = diff > 0 ? "–¥–æ–±–∞–≤–ª–µ–Ω–∞" : "–∏–∑—ä—è—Ç–∞";
          const message = `üíß –í –ø—É–ª–µ ${pool.name} ${direction} –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${diff.toFixed(2)} USD`;
          console.log(message);
          await sendTelegramMessage(message);
        }
      }

      lastCashValues[pool.name] = currentCash;
    } catch (err) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–ª–∞ ${pool.name}:`, err.message);
    }
  }
}

app.post("/webhook", async (req, res) => {
  const update = req.body;
  const message = update.message?.text?.trim();
  const userId = update.message?.chat?.id;

  if (!message || !userId) return res.sendStatus(200);

  if (!ACTIVE_CHAT_ID) {
    ACTIVE_CHAT_ID = userId.toString();
    console.log("üíæ chat_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", ACTIVE_CHAT_ID);
  }

  if (message === "/status") {
    let text = "üìä –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–æ –ø—É–ª–∞–º:\n";
    for (const pool of ironBankPools) {
      try {
        const cash = await getCash(pool);
        text += `${pool.name}: ${cash.toLocaleString(undefined, { maximumFractionDigits: 2 })} USD\n`;
      } catch {
        text += `${pool.name}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n`;
      }
    }
    await sendTelegramMessage(text, userId);
  } else if (message === "/start") {
    await sendTelegramMessage("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", userId);
  } else if (message === "/hf") {
    try {
      const { hf, collateral, borrow, portfolio, breakdown, liquidationEthPrice, ethPrice } = await calculateHealthFactor();

      let text = `üìâ –¢–µ–∫—É—â–∏–π Health Factor: ${hf}\n\n`;
      text += `üíº –û–±—â–∏–π –∑–∞–ª–æ–≥: $${collateral.toFixed(2)}\nüí£ –û–±—â–∏–π –¥–æ–ª–≥: $${borrow.toFixed(2)}\n`;
      text += `üí∞ –ü–æ—Ä—Ç—Ñ–µ–ª—å: $${portfolio.toFixed(2)}\n\n`;

      for (const line of breakdown) {
        text += `‚Ä¢ ${line}\n`;
      }

      text += `\nüìà –¶–µ–Ω–∞ ETH: $${ethPrice.toFixed(2)}\n`;

      if (liquidationEthPrice) {
        text += `‚ö†Ô∏è –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è –ø—Ä–∏ —Ü–µ–Ω–µ ETH ‚âà $${liquidationEthPrice.toFixed(2)}`;
      } else {
        text += `‚úÖ –î–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –¥–∞–ª–µ–∫–æ`;
      }

      await sendTelegramMessage(text, userId);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ calculateHealthFactor:", err);
      await sendTelegramMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ Health Factor. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.", userId);
    }
  }

  res.sendStatus(200);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log("Express server started on port", PORT);
});

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏
(async () => {
  try {
    const block = await provider.getBlockNumber();
    console.log("‚úÖ –°–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫:", block);
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏:", e.message);
  }
})();

// –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤
setInterval(checkLiquidity, CHECK_INTERVAL_MS);
setInterval(checkSelfHealth, CHECK_INTERVAL_MS);

checkLiquidity();
function checkSelfHealth() {
  // –ü–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏
}

const cTokenAbi = [
  "function balanceOf(address) view returns (uint256)",
  "function borrowBalanceStored(address) view returns (uint256)",
  "function exchangeRateStored() view returns (uint256)",
  "function decimals() view returns (uint8)"
];
const userAddress = selfMonitor.address;

// –ö—ç—à –¥–ª—è —Ü–µ–Ω—ã ETH
let cachedEthPrice = null;
let lastEthPriceUpdate = 0;
const ETH_PRICE_CACHE_MS = 60_000; // 1 –º–∏–Ω—É—Ç–∞

async function getEthPrice() {
  const now = Date.now();
  if (cachedEthPrice && now - lastEthPriceUpdate < ETH_PRICE_CACHE_MS) {
    return cachedEthPrice;
  }
  // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É ETH —á–µ—Ä–µ–∑ Binance API
  const { data } = await axios.get("https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT");
  cachedEthPrice = parseFloat(data.price);
  lastEthPriceUpdate = now;
  return cachedEthPrice;
}

const comptrollerAddress = "0xAB1c342C7bf5Ec5F02ADEA1c2270670bCa144CbB";
const comptrollerAbi = [
  "function markets(address cToken) view returns (bool isListed, uint256 collateralFactorMantissa, bool isComped)"
];
const comptroller = new ethers.Contract(comptrollerAddress, comptrollerAbi, provider);

async function getCollateralFactor(cTokenAddress) {
  const market = await comptroller.markets(cTokenAddress);
  // collateralFactorMantissa –æ–±—ã—á–Ω–æ —Å 18 –∑–Ω–∞–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 800000000000000000 = 0.8)
  return Number(ethers.utils.formatUnits(market.collateralFactorMantissa, 18));
}

async function calculateHealthFactor() {
  let totalCollateralUSD = 0;
  let totalBorrowUSD = 0;
  let ethBorrow = 0;
  let ethPrice = await getEthPrice();
  let breakdown = [];

  for (const pool of ironBankPools) {
    const cToken = new ethers.Contract(pool.address, cTokenAbi, provider);

    const [cBal, borrow, exchangeRate, cTokenDecimals, collateralFactor] = await Promise.all([
      cToken.balanceOf(userAddress),
      cToken.borrowBalanceStored(userAddress),
      cToken.exchangeRateStored(),
      cToken.decimals(),
      getCollateralFactor(pool.address)
    ]);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º scale –¥–ª—è exchangeRate (18 –∏–ª–∏ 8)
    let exchangeRateScale = 18;
    if (exchangeRate.lt(ethers.BigNumber.from("1000000000000"))) {
      exchangeRateScale = 8;
    }

    const suppliedUnderlying = cBal
      .mul(exchangeRate)
      .div(ethers.BigNumber.from(10).pow(exchangeRateScale));

    const supplied = parseFloat(ethers.utils.formatUnits(suppliedUnderlying, pool.decimals));
    const borrowed = parseFloat(ethers.utils.formatUnits(borrow, pool.decimals));

    let suppliedUSD = supplied;
    let borrowedUSD = borrowed;

    if (pool.name === "ETH") {
      suppliedUSD = supplied * ethPrice;
      borrowedUSD = borrowed * ethPrice;
    }
    if (pool.name === "WBTC") {
      if (!wbtcPrice) wbtcPrice = await getWbtcPrice();
      suppliedUSD = supplied * wbtcPrice;
      borrowedUSD = borrowed * wbtcPrice;
    }
    if (pool.name === "wstETH") {
      if (!wstethPrice) wstethPrice = await getWstethPrice();
      suppliedUSD = supplied * wstethPrice;
      borrowedUSD = borrowed * wstethPrice;
    }

    // –°—á–∏—Ç–∞–µ–º supply –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤ —Å collateral factor
    if (suppliedUSD > 0) {
      totalCollateralUSD += suppliedUSD * collateralFactor;
      breakdown.push(`${pool.name}: üü¢ $${suppliedUSD.toFixed(2)} (${supplied.toFixed(4)} ${pool.name}) √ó CF ${collateralFactor}`);
    }

    // –°—á–∏—Ç–∞–µ–º –¥–æ–ª–≥ –¥–ª—è –≤—Å–µ—Ö –ø—É–ª–æ–≤ (ETH –∏ —Å—Ç–µ–π–±–ª—ã)
    if (borrowedUSD > 0) {
      totalBorrowUSD += borrowedUSD;
      breakdown.push(`${pool.name}: üî¥ $${borrowedUSD.toFixed(2)} (${borrowed.toFixed(4)} ${pool.name})`);
    }
  }

  // Health Factor = totalCollateralUSD / totalBorrowUSD
  let hf = totalBorrowUSD > 0 ? totalCollateralUSD / totalBorrowUSD : 0;

  // –¶–µ–Ω–∞ ETH –¥–ª—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (–≥—Ä—É–±–æ: –∫–æ–≥–¥–∞ collateral == borrow)
  let liquidationEthPrice = null;
  if (ethBorrow > 0) {
    liquidationEthPrice = totalCollateralUSD / ethBorrow;
  }

  // –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è
  let portfolio = totalCollateralUSD - totalBorrowUSD;

  return {
    hf: hf.toFixed(4),
    collateral: totalCollateralUSD,
    borrow: totalBorrowUSD,
    portfolio,
    breakdown,
    liquidationEthPrice,
    ethPrice
  };
}

async function getWbtcPrice() {
  const { data } = await axios.get("https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT");
  return parseFloat(data.price);
}

async function getWstethPrice() {
  // –ú–æ–∂–Ω–æ –≤–∑—è—Ç—å —Å CoinGecko –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  const { data } = await axios.get("https://api.coingecko.com/api/v3/simple/price?ids=staked-ether&vs_currencies=usd");
  return data["staked-ether"].usd;
}